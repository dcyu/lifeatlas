# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module Repostspace
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?auth_scheme_preference: Array[String],
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_checksum_calculation: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?response_checksum_validation: String,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      interface _BatchAddChannelRoleToAccessorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchAddChannelRoleToAccessorsOutput]
        def added_accessor_ids: () -> ::Array[::String]
        def errors: () -> ::Array[Types::BatchError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#batch_add_channel_role_to_accessors-instance_method
      def batch_add_channel_role_to_accessors: (
                                                 space_id: ::String,
                                                 channel_id: ::String,
                                                 accessor_ids: Array[::String],
                                                 channel_role: ("ASKER" | "EXPERT" | "MODERATOR" | "SUPPORTREQUESTOR")
                                               ) -> _BatchAddChannelRoleToAccessorsResponseSuccess
                                             | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchAddChannelRoleToAccessorsResponseSuccess

      interface _BatchAddRoleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchAddRoleOutput]
        def added_accessor_ids: () -> ::Array[::String]
        def errors: () -> ::Array[Types::BatchError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#batch_add_role-instance_method
      def batch_add_role: (
                            space_id: ::String,
                            accessor_ids: Array[::String],
                            role: ("EXPERT" | "MODERATOR" | "ADMINISTRATOR" | "SUPPORTREQUESTOR")
                          ) -> _BatchAddRoleResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchAddRoleResponseSuccess

      interface _BatchRemoveChannelRoleFromAccessorsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchRemoveChannelRoleFromAccessorsOutput]
        def removed_accessor_ids: () -> ::Array[::String]
        def errors: () -> ::Array[Types::BatchError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#batch_remove_channel_role_from_accessors-instance_method
      def batch_remove_channel_role_from_accessors: (
                                                      space_id: ::String,
                                                      channel_id: ::String,
                                                      accessor_ids: Array[::String],
                                                      channel_role: ("ASKER" | "EXPERT" | "MODERATOR" | "SUPPORTREQUESTOR")
                                                    ) -> _BatchRemoveChannelRoleFromAccessorsResponseSuccess
                                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchRemoveChannelRoleFromAccessorsResponseSuccess

      interface _BatchRemoveRoleResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::BatchRemoveRoleOutput]
        def removed_accessor_ids: () -> ::Array[::String]
        def errors: () -> ::Array[Types::BatchError]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#batch_remove_role-instance_method
      def batch_remove_role: (
                               space_id: ::String,
                               accessor_ids: Array[::String],
                               role: ("EXPERT" | "MODERATOR" | "ADMINISTRATOR" | "SUPPORTREQUESTOR")
                             ) -> _BatchRemoveRoleResponseSuccess
                           | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _BatchRemoveRoleResponseSuccess

      interface _CreateChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateChannelOutput]
        def channel_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#create_channel-instance_method
      def create_channel: (
                            space_id: ::String,
                            channel_name: ::String,
                            ?channel_description: ::String
                          ) -> _CreateChannelResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateChannelResponseSuccess

      interface _CreateSpaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateSpaceOutput]
        def space_id: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#create_space-instance_method
      def create_space: (
                          name: ::String,
                          subdomain: ::String,
                          tier: ("BASIC" | "STANDARD"),
                          ?description: ::String,
                          ?user_kms_key: ::String,
                          ?tags: Hash[::String, ::String],
                          ?role_arn: ::String,
                          ?supported_email_domains: {
                            enabled: ("ENABLED" | "DISABLED")?,
                            allowed_domains: Array[::String]?
                          }
                        ) -> _CreateSpaceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateSpaceResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#delete_space-instance_method
      def delete_space: (
                          space_id: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#deregister_admin-instance_method
      def deregister_admin: (
                              space_id: ::String,
                              admin_id: ::String
                            ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                          | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _GetChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetChannelOutput]
        def space_id: () -> ::String
        def channel_id: () -> ::String
        def channel_name: () -> ::String
        def channel_description: () -> ::String
        def create_date_time: () -> ::Time
        def delete_date_time: () -> ::Time
        def channel_roles: () -> ::Hash[::String, ::Array[("ASKER" | "EXPERT" | "MODERATOR" | "SUPPORTREQUESTOR")]]
        def channel_status: () -> ("CREATED" | "CREATING" | "CREATE_FAILED" | "DELETED" | "DELETING" | "DELETE_FAILED")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#get_channel-instance_method
      def get_channel: (
                         space_id: ::String,
                         channel_id: ::String
                       ) -> _GetChannelResponseSuccess
                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetChannelResponseSuccess

      interface _GetSpaceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetSpaceOutput]
        def space_id: () -> ::String
        def arn: () -> ::String
        def name: () -> ::String
        def status: () -> ::String
        def configuration_status: () -> ("CONFIGURED" | "UNCONFIGURED")
        def client_id: () -> ::String
        def identity_store_id: () -> ::String
        def application_arn: () -> ::String
        def description: () -> ::String
        def vanity_domain_status: () -> ("PENDING" | "APPROVED" | "UNAPPROVED")
        def vanity_domain: () -> ::String
        def random_domain: () -> ::String
        def customer_role_arn: () -> ::String
        def create_date_time: () -> ::Time
        def delete_date_time: () -> ::Time
        def tier: () -> ("BASIC" | "STANDARD")
        def storage_limit: () -> ::Integer
        def user_admins: () -> ::Array[::String]
        def group_admins: () -> ::Array[::String]
        def roles: () -> ::Hash[::String, ::Array[("EXPERT" | "MODERATOR" | "ADMINISTRATOR" | "SUPPORTREQUESTOR")]]
        def user_kms_key: () -> ::String
        def user_count: () -> ::Integer
        def content_size: () -> ::Integer
        def supported_email_domains: () -> Types::SupportedEmailDomainsStatus
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#get_space-instance_method
      def get_space: (
                       space_id: ::String
                     ) -> _GetSpaceResponseSuccess
                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetSpaceResponseSuccess

      interface _ListChannelsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListChannelsOutput]
        def channels: () -> ::Array[Types::ChannelData]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#list_channels-instance_method
      def list_channels: (
                           space_id: ::String,
                           ?next_token: ::String,
                           ?max_results: ::Integer
                         ) -> _ListChannelsResponseSuccess
                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListChannelsResponseSuccess

      interface _ListSpacesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSpacesOutput]
        def spaces: () -> ::Array[Types::SpaceData]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#list_spaces-instance_method
      def list_spaces: (
                         ?next_token: ::String,
                         ?max_results: ::Integer
                       ) -> _ListSpacesResponseSuccess
                     | (?Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSpacesResponseSuccess

      interface _ListTagsForResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListTagsForResourceResponse]
        def tags: () -> ::Hash[::String, ::String]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#list_tags_for_resource-instance_method
      def list_tags_for_resource: (
                                    resource_arn: ::String
                                  ) -> _ListTagsForResourceResponseSuccess
                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListTagsForResourceResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#register_admin-instance_method
      def register_admin: (
                            space_id: ::String,
                            admin_id: ::String
                          ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#send_invites-instance_method
      def send_invites: (
                          space_id: ::String,
                          accessor_ids: Array[::String],
                          title: ::String,
                          body: ::String
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _TagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::TagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#tag_resource-instance_method
      def tag_resource: (
                          resource_arn: ::String,
                          tags: Hash[::String, ::String]
                        ) -> _TagResourceResponseSuccess
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _TagResourceResponseSuccess

      interface _UntagResourceResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UntagResourceResponse]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#untag_resource-instance_method
      def untag_resource: (
                            resource_arn: ::String,
                            tag_keys: Array[::String]
                          ) -> _UntagResourceResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UntagResourceResponseSuccess

      interface _UpdateChannelResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateChannelOutput]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#update_channel-instance_method
      def update_channel: (
                            space_id: ::String,
                            channel_id: ::String,
                            channel_name: ::String,
                            ?channel_description: ::String
                          ) -> _UpdateChannelResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateChannelResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#update_space-instance_method
      def update_space: (
                          space_id: ::String,
                          ?description: ::String,
                          ?tier: ("BASIC" | "STANDARD"),
                          ?role_arn: ::String,
                          ?supported_email_domains: {
                            enabled: ("ENABLED" | "DISABLED")?,
                            allowed_domains: Array[::String]?
                          }
                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/Repostspace/Client.html#wait_until-instance_method
      def wait_until: (:channel_created waiter_name, 
                    space_id: ::String,
                    channel_id: ::String
                  ) -> Client::_GetChannelResponseSuccess
                    | (:channel_created waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_GetChannelResponseSuccess
                    | (:channel_deleted waiter_name, 
                    space_id: ::String,
                    channel_id: ::String
                  ) -> Client::_GetChannelResponseSuccess
                    | (:channel_deleted waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_GetChannelResponseSuccess
                    | (:space_created waiter_name, 
                    space_id: ::String
                  ) -> Client::_GetSpaceResponseSuccess
                    | (:space_created waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_GetSpaceResponseSuccess
                    | (:space_deleted waiter_name, 
                    space_id: ::String
                  ) -> Client::_GetSpaceResponseSuccess
                    | (:space_deleted waiter_name, Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> Client::_GetSpaceResponseSuccess
    end
  end
end

